name: Auto Merge Feature Branches to Dev, Build, and Deploy to Docker Hub

on:
  schedule:
    - cron: '0 15 * * *' # 매일 자정 00:00 (한국 시간)
  workflow_dispatch: # 수동 실행 가능

permissions:
  contents: write
  pull-requests: write

jobs:
  auto_merge_feature_to_dev:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Git 설정
      - name: Configure Git
        run: |
          git config --global user.email "ppuding3861@gmail.com"
          git config --global user.name "ppudding3861"

      # feature/** 브랜치들을 dev로 병합
      - name: Get list of feature branches
        id: get_feature_branches
        run: |
          git fetch --all
          FEATURE_BRANCHES=$(git branch -r | grep 'origin/feature/' | sed 's|origin/||')
          echo "Feature branches found: $FEATURE_BRANCHES"
          echo "feature_branches=$FEATURE_BRANCHES" >> $GITHUB_ENV

      # 각 feature/** 브랜치에서 dev로 PR 생성
      - name: Create pull request from feature branches to dev
        if: ${{ env.feature_branches && env.feature_branches != '' }}
        env:
          GH_TOKEN: ${{ secrets.PPUDDING2 }}
        run: |
          for branch in $FEATURE_BRANCHES; do
            echo "Creating PR from $branch to dev"
            gh pr create --base dev --head $branch --title "Auto merge $branch into dev" --body "자동 생성된 Pull Request" || echo "PR for $branch already exists."
          done

      # PR 자동 병합 (dev 브랜치로)
      - name: Auto-merge pull requests into dev
        if: ${{ env.feature_branches && env.feature_branches != '' }}
        env:
          GH_TOKEN: ${{ secrets.PPUDDING2 }}
        run: |
          for branch in $FEATURE_BRANCHES; do
            PR_URL=$(gh pr view $branch --json url --jq '.url' || echo "")
            if [ -n "$PR_URL" ]; then
              echo "Merging PR: $PR_URL"
              gh pr merge "$PR_URL" --merge --auto || echo "Merge failed for $branch."
            else
              echo "No PR found for $branch to dev. Skipping merge."
            fi
          done

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: auto_merge_feature_to_dev
    steps:
      - name: Checkout repository  # 코드 체크아웃 추가
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image to Docker Hub
        env:
          REACT_APP_LLM: ${{ secrets.REACT_APP_LLM }}
          REACT_APP_TTS: ${{ secrets.REACT_APP_TTS }}
        run: |
          docker build -t yaggugifrontapp --build-arg REACT_APP_LLM=$REACT_APP_LLM --build-arg REACT_APP_TTS=$REACT_APP_TTS .
          docker tag yaggugifrontapp:latest ${{ secrets.DOCKER_USERNAME }}/yaggugifrontapp:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/yaggugifrontapp:latest
          
  deploy_local:
    runs-on: self-hosted
    needs: build_and_deploy
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Remove existing Docker container and image
        shell: cmd
        run: |
          docker stop yaggugifrontapp 2>NUL || echo "Container not running or already stopped"
          docker rm yaggugifrontapp 2>NUL || echo "Container not found or already removed"
          docker rmi ${{ secrets.DOCKER_USERNAME }}/yaggugifrontapp:latest 2>NUL || echo "Image not found or already removed"

      - name: Pull Docker image from Docker Hub and run container
        shell: cmd
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/yaggugifrontapp:latest
          docker run -d -p 3000:3000 --name yaggugifrontapp ${{ secrets.DOCKER_USERNAME }}/yaggugifrontapp:latest
